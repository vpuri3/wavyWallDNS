C-----------------------------------------------------------------------
c     include 'budgets.usr'
c     include 'tke.usr'
c     include 'avg.usr'
c     include 'wall.usr'
c-----------------------------------------------------------------------
c postProcess
c
c     integer nelx,nely,nelz
c     integer avgtyp,readstats,idir_plnr,idir_line,idir_geom
c     integer idir_sctr,iface
c     character*3 bctyp

c     integer gs_plnr_hndl
c     save    gs_plnr_hndl
c     data    gs_plnr_hndl / 0 /
c
c     integer gs_line_hndl
c     save    gs_line_hndl
c     data    gs_line_hndl / 0 /
c
c     integer gs_geom_hndl
c     save    gs_geom_hndl
c     data    gs_geom_hndl / 0 /

c     integer gs_sctr_hndl
c     save    gs_sctr_hndl
c     data    gs_sctr_hndl / 0 /
c
c     nelx      = 64
c     nely      = 16
c     nelz      = 32
c
c     avgtyp    = -4 ! -ve: plnr, 0: line, mag>1: nrep for geomavg
c     readstats = int(readSTAT)
c
c     idir_sctr = 2
c     idir_line = 2
c     idir_plnr = 3
c     idir_geom = 1
c
c     iface     = 1
c     bctyp     = 'W  '

c     call postProcess(nelx,nely,nelz,avgtyp,readstats
c    $                ,gs_line_hndl,idir_line
c    $                ,gs_plnr_hndl,idir_plnr
c    $                ,gs_geom_hndl,idir_geom
c    $                ,gs_sctr_hndl,idir_sctr,iface,bctyp)
c
C-----------------------------------------------------------------------
      subroutine postProcess(nelx,nely,nelz,avgtyp,readstats
     $                      ,gs_line_hndl,idir_line
     $                      ,gs_plnr_hndl,idir_plnr
     $                      ,gs_geom_hndl,idir_geom
     $                      ,gs_sctr_hndl,idir_sctr,iface,bctyp)
      include 'SIZE'
      include 'TOTAL'
      include 'AVG'
      include 'AVGINCOMP'
      include 'BUDGETSINCOMP'
      include 'REFERENCE'
      include 'TKEINCOMP'

      integer avgtyp
c
      real avtime
      integer ifld,ntot
      logical ifsample,iifxyo,iifvo,iifpo,iifto

      real up (lx1,ly1,lz1,lelv)
     $    ,yp (lx1,ly1,lz1,lelv)
     $    ,Tma(lx1,ly1,lz1,lelv)

      integer icalld
      save    icalld 
      data    icalld / 0 /

      if(nid.eq.0) write(6,*)'in postProcess(...)','avgtyp',avgtyp

      ntot     = lx1*ly1*lz1*nelv
      ifld     = 1
      ifsample = .true.

      if(icalld.eq.0) then
          icalld = icalld + 1
          call load_standard_incomp(readstats,avtime)
          call load_budgets_incomp(readstats)
      endif

      call sample(vx,vy,vz,pr,t,'ins',
     $           'vx','vy','vz','pr','garbage')


      do i=1,ntot
        vx(i,1,1,1) = uavg(i,1,1,1)
        vy(i,1,1,1) = vavg(i,1,1,1)
        vz(i,1,1,1) = wavg(i,1,1,1)
      enddo

      call printdiverr

      call geom_avg_tke(avgtyp,nelx,nely,nelz,ifld
     $                 ,gs_line_hndl,idir_line
     $                 ,gs_plnr_hndl,idir_plnr
     $                 ,gs_geom_hndl,idir_geom)

      call budgets_incomp_calc(0,.true.)
      call comp_tke

      if(nid.eq.0) then
        write(6,258)'atime:',atime
        write(6,258)'tkmax:',tkmax
        write(6,258)'tk_L2:',tk_L2
        write(6,258)'immax:',immax
        write(6,258)'im_L2:',im_L2
      endif

 258  format(a6,1es15.8)

      call probePoint

c     call geom_avg_tke2(avgtyp,nelx,nely,nelz,ifld
c    $                  ,gs_line_hndl,idir_line
c    $                  ,gs_plnr_hndl,idir_plnr
c    $                  ,gs_geom_hndl,idir_geom)

c     if(nid.eq.0) then
c       write(6,258)'atime:',atime
c       write(6,258)'tkmax:',tkmax
c       write(6,258)'tkave:',tkave
c       write(6,258)'immax:',immax
c     endif

! comp wall shaer
      call comp_uplus(up,yp,Tma,uavg,vavg,wavg,iface,bctyp
     $               ,gs_sctr_hndl,nelx,nely,nelz,ifld,idir_sctr)

      call avg_tensor_wrapper(up,avgtyp,nelx,nely,nelz,ifld
     $                       ,gs_line_hndl,idir_line
     $                       ,gs_plnr_hndl,idir_plnr
     $                       ,gs_geom_hndl,idir_geom)

      call avg_tensor_wrapper(yp,avgtyp,nelx,nely,nelz,ifld
     $                       ,gs_line_hndl,idir_line
     $                       ,gs_plnr_hndl,idir_plnr
     $                       ,gs_geom_hndl,idir_geom)

      call avg_tensor_wrapper(Tma,avgtyp,nelx,nely,nelz,ifld
     $                       ,gs_line_hndl,idir_line
     $                       ,gs_plnr_hndl,idir_plnr
     $                       ,gs_geom_hndl,idir_geom)

! dumping
      time = avtime

      if(ifsample) then
      call sample(cnk,prk,ptk,pdk,psk,'tk1',
     $           'conv','prod','pres_tr','pres_df','garbage')
      call sample(psk,tdk,epk,vdk,prk,'tk2',
     $           'pres_st','turb_df','diss','visc_df','garbage')
      call sample(tkk,imk,psk,prk,pdk,'tk3',
     $           'tkk','imk','garbage','garbage','garbage')
      call sample(up,yp,Tma,ym1,ym1,'upl',
     $           'uplus','yplus','Wshr','trash','trash')
      endif

!     Outpost

      iifxyo = ifxyo
      iifvo  = ifvo
      iifpo  = ifpo
      iifto  = ifto

      ifxyo = .true.
      ifvo  = .true.
      ifpo  = .true.
      ifto  = .true.
c
c     call outpost2(uavg,vavg,wavg,pm1avg,tavg,ldimt,'avg')
c     call outpost2(urms,vrms,wrms,pmrms,trms,ldimt,'rms')
c     call outpost2(uvms,wums,vwms,pm1avg,tavg,1,'rm2')
      call outpost2(cnk,prk,ptk,pdk,psk,1,'tk1')
      call outpost2(tdk,epk,vdk,tkk,imk,1,'tk2')
c
      ifxyo = iifxyo
      ifvo  = iifvo
      ifpo  = iifpo
      ifto  = iifto
 

      return
      end
C-----------------------------------------------------------------------
      subroutine write2file(sclr1,sclr2,sclr3,sclr4,name1,name2,name3
     $                     ,name4,filename,step0,dstep,numsteps)
      include 'SIZE'
      include 'TOTAL'

      real sclr1,sclr2,sclr3,sclr4
      integer step0,dstep,numsteps
      character(3) name1,name2,name3,name4,filename
c
      integer step1
      logical ifnwrite

      integer i,j
      save    i
      data    i  /0/

      real val(6,lhis)
      save val

      character(7) filenametot
      logical there

      if(istep.lt.step0) goto 998

      step1 = step0 + dstep * (numsteps - 1)
      if(istep.gt.step1) goto 998

      ifnwrite =  mod(istep-step0,dstep).ne.0
      if(ifnwrite) goto 998

      if(numsteps.gt.lhis) then
        if(nid.eq.0) write(6,*) 'ABORT: in write2file, numsteps > lhis'
        call exit
      endif

      if(i.eq.0) then
        call rzero(val,6*numsteps)
      endif


      filename = trim(filename)
      call blank(filenametot,7)
      filenametot = filename//".dat"
      if(nid.eq.0) write(6,*) 'writing scalar to file ',filenametot

      if(i.eq.numsteps) i = 0
      i = i + 1
      val(1,i) = istep
      val(2,i) = time
      val(3,i) = sclr1
      val(4,i) = sclr2
      val(5,i) = sclr3
      val(6,i) = sclr4

      call nekgsync()         

      if((nid.eq.0).and.(istep.eq.step1)) then

        inquire(file=filenametot,exist=there)
        if(there) then
          write(6,*) 'Rewriting file: ',filenametot
          open(unit=987,FILE=filenametot,status='old')
          close (987,status='delete')
        else
          write(6,*) 'Writing file: ',filenametot
        endif

        open(unit=987,FILE=trim(filenametot),status='new')
        write(987,'(1p,6A15)')'Step','Time',name1,name2,name3,name4

        do j=1,numsteps
          write(987,'(1p,6E15.7)') val(1,j),val(2,j),val(3,j),val(4,j)
     $                            ,val(5,j),val(6,j)
        enddo

        close(unit=987)

      endif

      call nekgsync()         

 998  continue

      return
      end
c-----------------------------------------------------------------------
      subroutine comp_div(dd,ux,uy,uz)
      include 'SIZE'
      include 'TOTAL'

      real dd
      real ux(lx1,ly1,lz1,lelv)
     $    ,uy(lx1,ly1,lz1,lelv)
     $    ,uz(lx1,ly1,lz1,lelv)
c
      real div(lx1,ly1,lz1,lelv)
     $    ,dudx(lx1,ly1,lz1,lelv)
     $    ,dudy(lx1,ly1,lz1,lelv)
     $    ,dudz(lx1,ly1,lz1,lelv)
     $    ,dvdx(lx1,ly1,lz1,lelv)
     $    ,dvdy(lx1,ly1,lz1,lelv)
     $    ,dvdz(lx1,ly1,lz1,lelv)
     $    ,dwdx(lx1,ly1,lz1,lelv)
     $    ,dwdy(lx1,ly1,lz1,lelv)
     $    ,dwdz(lx1,ly1,lz1,lelv)

      integer ntot

      ntot=lx1*ly1*lz1*nelv
      call rzero(div,ntot)

      call gradm1(dudx,dudy,dudz,ux)
      call gradm1(dvdx,dvdy,dvdz,uy)
      call gradm1(dwdx,dwdy,dwdz,uz)

      do i=1,ntot
        div(i,1,1,1) = dudx(i,1,1,1) + dvdy(i,1,1,1) + dwdz(i,1,1,1)
        div(i,1,1,1) = div(i,1,1,1)*div(i,1,1,1)
      enddo

      call avg_3d(dd,div)
      dd = sqrt(dd)

      return
      end
C-----------------------------------------------------------------------
c  in usrchk()
c
c     integer f,ifld,idir
c     character*3 bctyp
c 
c     real Tx(lx1,ly1,lz1,lelv) ! shear stress X-comp
c     real Ty(lx1,ly1,lz1,lelv) !              Y   
c     real Tz(lx1,ly1,lz1,lelv) !              Z
c
c     ifxyo = .true.
c     ifto  = .true.
c
c     f     = 1
c     bctyp = 'W  '
c     ifld  = 1
c     call comp_wallShear(Tx,Ty,Tz,vx,vy,vz,f,bctyp,ifld)

c
C-----------------------------------------------------------------------
      subroutine comp_wallShear(Tx,Ty,Tz,ux,uy,uz,f,bctyp,ifld)
      implicit none
      include 'SIZE'
      include 'TOTAL'

      ! parameters
      integer lxyz,nxzf,lxyzv
      parameter(lxyz = lx1*ly1*lz1)
      parameter(nxzf = 2*ldim)
      parameter(lxyzv = lelv*lxyz)

      real Tx(lx1,ly1,lz1,lelv) ! Shear Stress
     $    ,Ty(lx1,ly1,lz1,lelv)
     $    ,Tz(lx1,ly1,lz1,lelv)
     $    ,ux(lx1,ly1,lz1,lelv) ! Velocity Field
     $    ,uy(lx1,ly1,lz1,lelv)
     $    ,uz(lx1,ly1,lz1,lelv)
      integer f,ifld
      character*3 bctyp

      real Tm(lx1,ly1,lz1,lelv) ! Shear-Mag
      real ur,us,ut,vr,vs,vt,wr,ws,wt

      common /ctmp1/ ur(lxyz),us(lxyz),ut(lxyz) ! used to compute sij
     $             , vr(lxyz),vs(lxyz),vt(lxyz)
     $             , wr(lxyz),ws(lxyz),wt(lxyz)

      real sij(lx1,ly1,lz1,nxzf,lelv)  ! strain rate tensor

      integer e,k,ntot
      integer idimt,iface,j1,js1,jf1,jskip1,j2,js2,jf2,jskip2
      real Tmg,vsc,dsty                ! vsc == dynamic viscosity
      real n1 ,n2 ,n3
     $    ,s11,s12,s13
     $    ,s21,s22,s23
     $    ,s31,s32,s33
     $    ,a,xdrg,ydrg,zdrg,mdrg,Tmavg,ufavg
      logical iifxyo,iifvo,iifpo,iifto ! for outposting

      if(nid.eq.0) write(6,*) 'in comp_wallShear(...)'
c
      ntot = lx1*ly1*lz1*nelv
c
      call rzero(Tx,ntot)
      call rzero(Ty,ntot)
      call rzero(Tz,ntot)
      call rzero(Tm,ntot)
c
      call rzero(sij,ntot*nxzf)

      a     = 0.                ! area of face
      xdrg  = 0.                ! drag on face X-comp
      ydrg  = 0.                !              Y 
      zdrg  = 0.                !              Z
      mdrg  = 0.                !              Mag
c
      idimt = 1
      vsc   = vdiff(lx1,ly1,lz1,nelt,idimt)
      dsty  = param(1)

      ! initialize viscocity
      if (istep.eq.0) call cfill(vdiff,param(2),ntot)

      ! strain rate tensor
      call comp_sij(sij,nxzf,ux,uy,uz,ur,us,ut,vr,vs,vt,wr,ws,wt)

      ! get face info (initialize skpdat array)
      call dsset(nx1,ny1,nz1)

      do e=1,nelv
        if (cbc(f,e,ifld).eq.bctyp) then
          iface  = eface1(f)   ! surface to volume shifts
          js1    = skpdat(1,iface)
          jf1    = skpdat(2,iface)
          jskip1 = skpdat(3,iface)
          js2    = skpdat(4,iface)
          jf2    = skpdat(5,iface)
          jskip2 = skpdat(6,iface)

          k = 0
          do j2=js2,jf2,jskip2
          do j1=js1,jf1,jskip1
            k = k + 1
c
            n1 = unx(k,1,f,e)      ! face normal X-comp
            n2 = uny(k,1,f,e)      !             Y
            n3 = unz(k,1,f,e)      !             Z
c
            s11 = sij(j1,j2,1,1,e) ! Strain rate tensor
            s21 = sij(j1,j2,1,4,e)
            s31 = sij(j1,j2,1,6,e)
c
            s12 = sij(j1,j2,1,4,e)
            s22 = sij(j1,j2,1,2,e)
            s32 = sij(j1,j2,1,5,e)
c
            s13 = sij(j1,j2,1,6,e)
            s23 = sij(j1,j2,1,5,e)
            s33 = sij(j1,j2,1,3,e)
c
            Tx(j1,j2,1,e) = -(s11*n1 + s12*n2 + s13*n3)*vsc
            Ty(j1,j2,1,e) = -(s21*n1 + s22*n2 + s23*n3)*vsc
            Tz(j1,j2,1,e) = -(s31*n1 + s32*n2 + s33*n3)*vsc
c
            Tmg =       Tx(j1,j2,1,e)*Tx(j1,j2,1,e)
            Tmg = Tmg + Ty(j1,j2,1,e)*Ty(j1,j2,1,e)
            Tmg = Tmg + Tz(j1,j2,1,e)*Tz(j1,j2,1,e)
            Tmg = sqrt(Tmg)
c
            Tm(j1,j2,1,e) = Tmg                       ! shear stress mag
c
            a    = a    + area(k,1,f,e)               ! area
            xdrg = xdrg + Tx(j1,j2,1,e)*area(k,1,f,e) ! viscous drag
            ydrg = ydrg + Ty(j1,j2,1,e)*area(k,1,f,e)
            zdrg = zdrg + Tz(j1,j2,1,e)*area(k,1,f,e)
c
c           xdrg = xdrg - n1*pr(j1,j2,1,e)*area(k,1,f,e) ! pressure contribution
c           ydrg = ydrg - n2*pr(j1,j2,1,e)*area(k,1,f,e) ! to drag
c           zdrg = zdrg - n3*pr(j1,j2,1,e)*area(k,1,f,e)

          enddo
          enddo

        endif
      enddo
 
      call gop(a   ,Tmg,'+  ',1) ! summing over all processes
      call gop(xdrg,Tmg,'+  ',1)
      call gop(ydrg,Tmg,'+  ',1)
      call gop(zdrg,Tmg,'+  ',1)
 
      mdrg = xdrg*xdrg + ydrg*ydrg + zdrg*zdrg
      mdrg = sqrt(mdrg)
      Tmavg= mdrg / a
      ufavg= sqrt(Tmavg/dsty)
 
      if(nid.eq.0) then
        write(6,258)'area:' ,a
        write(6,258)'xdrag:',xdrg
        write(6,258)'ydrag:',ydrg
        write(6,258)'zdrag:',zdrg
        write(6,258)'Mdrag:',mdrg
        write(6,258)'Tmavg:',Tmavg
        write(6,258)'Ufavg:',ufavg
      endif
 
 258  format(a6,1es15.8)

      ! Outpost

      iifxyo = ifxyo
      iifvo  = ifvo
      iifpo  = ifpo
      iifto  = ifto
 
      ifxyo = .true.
      ifvo  = .true.
      ifpo  = .false.
      ifto  = .true.
 
c     call outpost(Tx,Ty,Tz,pr,Tm,'wsh')
 
      ifxyo = iifxyo
      ifvo  = iifvo
      ifpo  = iifpo
      ifto  = iifto
 
      return
      end
c------------------------------------------------------------------------
c Wall Normal
c------------------------------------------------------------------------
c  in usrchk()
c
c     integer f,ifld,idir
c     character*3 bctyp
c 
c     real fNx(lx1,ly1,lz1,lelv) ! shear stress X-comp
c     real fNy(lx1,ly1,lz1,lelv) !              Y   
c     real fNz(lx1,ly1,lz1,lelv) !              Z
c
c     ifxyo = .true.
c     ifto  = .true.
c
c     f     = 1
c     bctyp = 'W  '
c     ifld  = 1
c     call comp_wallShear(Tx,Ty,Tz,vx,vy,vz,f,bctyp,ifld)
c
C-----------------------------------------------------------------------
      subroutine get_faceNormal(fNx,fNy,fNz,f,bctyp,ifld)
      implicit none
      include 'SIZE'
      include 'TOTAL'

      real fNx(lx1,ly1,lz1,lelv) ! face normals
     $    ,fNy(lx1,ly1,lz1,lelv)
     $    ,fNz(lx1,ly1,lz1,lelv)
      integer f,ifld
      character*3 bctyp

      integer e,k,ntot
      integer idimt,iface,j1,js1,jf1,jskip1,j2,js2,jf2,jskip2

      ntot = lx1*ly1*lz1*nelv
c
      call rzero(fNx,ntot)
      call rzero(fNy,ntot)
      call rzero(fNz,ntot)
c
      idimt = 1

      ! get face info (initialize skpdat array)
      call dsset(nx1,ny1,nz1)

      do e=1,nelv
        if (cbc(f,e,ifld).eq.bctyp) then
          iface  = eface1(f)   ! surface to volume shifts
          js1    = skpdat(1,iface)
          jf1    = skpdat(2,iface)
          jskip1 = skpdat(3,iface)
          js2    = skpdat(4,iface)
          jf2    = skpdat(5,iface)
          jskip2 = skpdat(6,iface)

          k = 0
          do j2=js2,jf2,jskip2
          do j1=js1,jf1,jskip1
            k = k + 1
c
            fNx(j1,j2,1,e) = unx(k,1,f,e)      ! face normal X-comp
            fNy(j1,j2,1,e) = uny(k,1,f,e)      !             Y
            fNz(j1,j2,1,e) = unz(k,1,f,e)      !             Z
c
          enddo
          enddo

        endif
      enddo

      return
      end
C------------------------------------------------------------------------
c U-Plus, Y-Plus
C-----------------------------------------------------------------------
c     In usrchk,
c     call comp_uplus(upl,ypl,vlx,vly,vlz,f,bctyp,gs_sctr_hndl
c    $                      ,nelx,nely,nelz,ifld,idir)
c
c     up,yp   : u-plus, y-plus
c     ux/y/z  : velocity fields
c     f       : face containing wall data
c     idir    : direction perpendicular to face /
c               direction to scatter data from face into domain
c               [1,2,3] ==> [x,y,z]
c     bctyp   : Boundary condition of face (char*3)
c
c     computes normal and tangential componenets of velocity,
c     shear stress on wall, drag force on wall, friction velocity,
c     y-plus.
c
c     outputs 1) shear stress vector on face,
c             2) normal, tangential velocity,
c                dist. to face, shear stress mag in volume,
c             3) u-plus, y-plus, shear stress mag in volume.
c
c     relies on lexicographical element and node ordering.
c
c-----------------------------------------------------------------------
c
c      _________________________________________________
c      \                                                |
c       \                                               |
c        \       scatter parallel                       |
c wall--> \       to Y                                  |
c (face 1) \                                            |
c           * ------------------> *                     |
c            \        ^                                 |  ^ Z
c             \     distance to face                    |  |
c              \                                        |  |
c               \_______________________________________|  +----> Y
c
c     real ux(lx1,ly1,lz1,lelv)
c     real uy(lx1,ly1,lz1,lelv)
c     real uz(lx1,ly1,lz1,lelv)
c     real up(lx1,ly1,lz1,lelv)
c     real yp(lx1,ly1,lz1,lelv)
c     integer f,ifld,idir_sctr,idir_avg
c     character*3 bctyp
c     logical ifplnr_avg,ifsample
c
c     integer gs_sctr_hndl
c     save    gs_sctr_hndl
c     data    gs_sctr_hndl / 0 /
c
c     integer gs_avg_hndl
c     save    gs_avg_hndl
c     data    gs_avg_hndl / 0 /
c
c     f          = 1
c     bctyp      = 'W  '
c     nelx       = 64
c     nely       = 16
c     nelz       = 32
c     ifld       = 1
c     idir_sctr  = 2
c     idir_avg   = 3
c     ifplnr_avg = .true. ! average over homogeneous direction idir_avg
c     ifsample  = .true.
c
c     call comp_uplus(up,yp,ux,uy,uz,f,bctyp,gs_sctr_hndl,gs_avg_hndl
c    $      ,nelx,nely,nelz,ifld,idir_sctr,idir_avg,ifplnr_avg,ifsample)
c
C-----------------------------------------------------------------------
      subroutine comp_uplus(up,yp,volTm,ux,uy,uz,f,bctyp,gs_hndl1
     $                           ,nelx,nely,nelz,ifld,idir1)

      include 'SIZE'
      include 'TOTAL'

      real up(lx1,ly1,lz1,lelv)    ! U-Plus
     $    ,yp(lx1,ly1,lz1,lelv)    ! Y-Plus
     $    ,volTm(lx1,ly1,lz1,lelv) ! shear magnitude
     $    ,ux(lx1,ly1,lz1,lelv)    ! Velocity Field
     $    ,uy(lx1,ly1,lz1,lelv)
     $    ,uz(lx1,ly1,lz1,lelv)
      integer f,ifld,gs_hndl1,idir1
      integer nelx,nely,nelz
      character*3 bctyp
c
c     PREFIX:
c            f   --> data present only on face (zero elsewhere)
c            vol --> face data scattered into domain
c                    in direction idir1

      real fNx(lx1,ly1,lz1,lelv) ! face normal  X
     $    ,fNy(lx1,ly1,lz1,lelv) !              Y
     $    ,fNz(lx1,ly1,lz1,lelv) !              Z 
     $    ,fTx(lx1,ly1,lz1,lelv) ! shear stress X-comp
     $    ,fTy(lx1,ly1,lz1,lelv) !              Y   
     $    ,fTz(lx1,ly1,lz1,lelv) !              Z
     $    ,fTm(lx1,ly1,lz1,lelv) !              Mag    
     $    ,fUf(lx1,ly1,lz1,lelv) ! face friction vel
c
     $    ,volNx(lx1,ly1,lz1,lelv)
     $    ,volNy(lx1,ly1,lz1,lelv)
     $    ,volNz(lx1,ly1,lz1,lelv)
c    $    ,volTm(lx1,ly1,lz1,lelv)
     $    ,volUf(lx1,ly1,lz1,lelv)
c
     $    ,utn(lx1,ly1,lz1,lelv) ! tangential velocity mag
     $    ,d2f(lx1,ly1,lz1,lelv) ! distance to face

      integer e,k,ntot
      real n1 ,n2 ,n3
      real u,v,w,un,uf,Tmg,vsc,dsty
      logical iifxyo,iifvo,iifpo,iifto ! for outposting

      if(nid.eq.0) write(6,*) 'in comp_uplus(...)'
c
      ntot = lx1*ly1*lz1*nelv
      vsc   = vdiff(lx1,ly1,lz1,nelt,1)
      dsty  = param(1)
c
      call rzero(up,ntot)
      call rzero(yp,ntot)
c
      call rzero(fTm,ntot)
      call rzero(fUf,ntot)   ! friction vel on face
c
      call rzero(volNx,ntot)
      call rzero(volNy,ntot)
      call rzero(volNz,ntot)
      call rzero(volTm,ntot)
      call rzero(volUf,ntot) ! friction vel in vol
c
      call rzero(utn,ntot)
      call rzero(d2f,ntot)
c
      call rzero(sij,ntot*nxzf)

      call get_faceNormal(fNx,fNy,fNz,f,bctyp,ifld)
 
      call comp_wallShear(fTx,fTy,fTz,ux,uy,uz,f,bctyp,ifld)

      ! shear magnitude, friction velocity
      do i=1,ntot
        fTm(i,1,1,1) = fTx(i,1,1,1)*fTx(i,1,1,1)
     $                +fTy(i,1,1,1)*fTy(i,1,1,1)
     $                +fTz(i,1,1,1)*fTz(i,1,1,1)
        fTm(i,1,1,1) = sqrt(fTm(i,1,1,1))
        fUf(i,1,1,1) = sqrt(fTm(i,1,1,1)/dsty)
      enddo

      ! scatter face data into domain
      call scttr(volNx,fNx,f,bctyp,gs_hndl1,nelx,nely,nelz,ifld,idir1)
      call scttr(volNy,fNy,f,bctyp,gs_hndl1,nelx,nely,nelz,ifld,idir1)
      call scttr(volNz,fNz,f,bctyp,gs_hndl1,nelx,nely,nelz,ifld,idir1)
      call scttr(volTm,fTm,f,bctyp,gs_hndl1,nelx,nely,nelz,ifld,idir1)
      call scttr(volUf,fUf,f,bctyp,gs_hndl1,nelx,nely,nelz,ifld,idir1)
      ! distance in direction parallel to idir
      call dist2face(d2f,f,bctyp,gs_hndl1,nelx,nely,nelz,ifld,idir1)
c
      ! compute u-plus, y-plus
      do i=1,ntot
         u   = ux   (i,1,1,1)
         v   = uy   (i,1,1,1)
         w   = uz   (i,1,1,1)
         n1  = volNx(i,1,1,1)
         n2  = volNy(i,1,1,1)
         n3  = volNz(i,1,1,1)
         Tmg = volTm(i,1,1,1)
c        uf  = volUf(i,1,1,1)            ! =avg(sqrt(Tmg/rho))
         uf  = sqrt(Tmg/dsty)            ! =sqrt(avg(Tmg)/rho)
c
         un = u*n1 + v*n2 + w*n3         ! mag of normal component
         un = u*u  + v*v  + w*w - un*un
         un = sqrt(un)
         utn(i,1,1,1) = un               ! mag of tangential component
c
         up(i,1,1,1) = utn(i,1,1,1)/uf
         yp(i,1,1,1) = d2f(i,1,1,1)*uf/vsc
      enddo

      ! Outpost

      iifxyo = ifxyo
      iifvo  = ifvo
      iifpo  = ifpo
      iifto  = ifto
c
      ifxyo = .true.
      ifvo  = .true.
      ifpo  = .true.
      ifto  = .true.
c
c     call outpost(up,yp,utn,volTm,d2f,'upl')
c
      ifxyo = iifxyo
      ifvo  = iifvo
      ifpo  = iifpo
      ifto  = iifto
c
      return
      end
c-----------------------------------------------------------------------
c
c     Scatter face data into domain in direction idir.
c
c     idir [1,2,3] ==> [X,Y,Z]
c
c     See example below.
c-----------------------------------------------------------------------
c     Assuming deformation of the form y = f(x,z),
c
c     From usrchk()
c      
c     real u (lx1,ly1,lz1,lelv)
c    $     ua(lx1,ly1,lz1,lelv)
c
c     integer gs_sctr_hndl
c     save    gs_sctr_hndl
c     data    gs_sctr_hndl / 0 /
c
c     f     = 1
c     bctyp = 'W  '
c     nelx  = 16
c     nelx  = 32
c     nelx  = 128
c     ifld  = 1       ! Velocity field
c     idir  = 2       ! Y-Direction
c
c     call scttr(ua,u,f,bctyp,gs_sctr_hndl,nelx,nely,nelz,ifld,idir)
c
c      _________________________________________________
c      \                                                |
c       \                                               |
c        \       scatter parallel                       |
c wall--> \       to Y                                  |
c (face 1) \                                            |
c           * ------------------> *                     |
c            \        ^                                 |  ^ Z
c             \     distance to face                    |  |
c              \                                        |  |
c               \_______________________________________|  +----> Y
c
c
c-----------------------------------------------------------------------
      subroutine scttr(ua,u,f,bctyp,gs_hndl,nelx,nely,nelz,ifld,idir)
      include 'SIZE'
      include 'TOTAL'

      real ua(lx1,ly1,lz1,lelv),u(1)
      character*3 bctyp
      integer gs_hndl,idir,f

      integer nelx,nely,nelz,nel
c     integer*8 glo_num(lx1,ly1,lz1,lelv)
c     common /sctr/ glo_num,nelx,nely,nelz,nel,n

      nel  = nelfld(ifld)
      n    = nx1*ny1*nz1*nel

      if (gs_hndl.eq.0) then
c      call rzero(glo_num,n)
       call dsset(nx1,ny1,nz1)
       if (idir.eq.1) call gs_x_sctr(gs_hndl,f,bctyp,nelx,nely,nelz,nel)
       if (idir.eq.2) call gs_y_sctr(gs_hndl,f,bctyp,nelx,nely,nelz,nel)
       if (idir.eq.3) call gs_z_sctr(gs_hndl,f,bctyp,nelx,nely,nelz,nel)
      endif

      call copy(ua,u,n)

c     VERIFY GLOBAL NUMBERING
c     do i=1,n
c        ua(i,1,1,1) = glo_num(i,1,1,1)
c     enddo

      call fgslib_gs_op(gs_hndl,ua,1,1,0)

      return
      end
c-----------------------------------------------------------------------
      subroutine gs_x_sctr(gs_sctr_hndl,f,bctyp,nelx,nely,nelz,nel)
      include 'SIZE'
      include 'TOTAL'
      integer gs_sctr_hndl,f,e,ex,ey,ez,eg,nelyz
      integer*8 ex_g
      common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal

      integer nelx,nely,nelz,nel,n
      integer*8 glo_num(lx1,ly1,lz1,lelv)
c     common /sctr/ glo_num,nelx,nely,nelz,nel,n

      n     = nx1*ny1*nz1*nel
      nelyz = nely*nelz
      nt    = ny1*nely*nz1*nelz

      do e=1,nel
         eg = lglel(e)
         call get_exyz(ex,ey,ez,eg,nelx,nelyz,1)
         ex_g = ey       ! Ensure int*8 promotion
         do k=1,nz1      ! Enumerate points in the y-z plane
         do j=1,ny1
         do i=1,nx1
            glo_num(i,j,k,e) = j+ny1*(k-1) + ny1*nz1*(ex_g-1)
            glo_num(i,j,k,e) = - glo_num(i,j,k,e)
         enddo
         enddo
         enddo
         call flag_bdry(glo_num,f,e,bctyp)
      enddo

      call fgslib_gs_setup(gs_sctr_hndl,glo_num,n,nekcomm,mp)

      return
      end
c-----------------------------------------------------------------------
      subroutine gs_y_sctr(gs_sctr_hndl,f,bctyp,nelx,nely,nelz,nel)
      include 'SIZE'
      include 'TOTAL'
      integer gs_sctr_hndl,f,e,ex,ey,ez,eg
      integer*8 ex_g
      common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal

      integer nelx,nely,nelz,nel,n
      integer*8 glo_num(lx1,ly1,lz1,lelv)
c     common /sctr/ glo_num,nelx,nely,nelz,nel,n

      n  = nx1*ny1*nz1*nel

      do e=1,nel
         eg = lglel(e)
         call get_exyz(ex,ey,ez,eg,nelx,nely,nelz)            
         ex_g = (ez-1)*nelx+ex  ! Ensure int*8 promotion
         do k=1,nz1
         do j=1,ny1
         do i=1,nx1
          glo_num(i,j,k,e) = k+nz1*(i-1) + nx1*nz1*(ex_g-1)
          glo_num(i,j,k,e) = - glo_num(i,j,k,e)
         enddo
         enddo
         enddo
         call flag_bdry(glo_num,f,e,bctyp)
      enddo

      call fgslib_gs_setup(gs_sctr_hndl,glo_num,n,nekcomm,mp)

      return
      end
c-----------------------------------------------------------------------
      subroutine gs_z_sctr(gs_sctr_hndl,f,bctyp,nelx,nely,nelz,nel)
      include 'SIZE'
      include 'TOTAL'
      integer gs_sctr_hndl,f,e,ex,ey,ez,eg,nelxy
      integer*8 ex_g
      common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal

      integer nelx,nely,nelz,nel,n
      integer*8 glo_num(lx1,ly1,lz1,lelv)
c     common /sctr/ glo_num,nelx,nely,nelz,nel,n

      n     = nx1*ny1*nz1*nel
      nelxy = nelx*nely

      do e=1,nel
         eg = lglel(e)
         call get_exyz(ex,ey,ez,eg,nelxy,1,1)
         ex_g = ex       ! Ensure int*8 promotion
         do k=1,nz1
         do j=1,ny1
         do i=1,nx1
          glo_num(i,j,k,e) = i+nx1*(j-1) + nx1*ny1*(ex_g-1)
          glo_num(i,j,k,e) = - glo_num(i,j,k,e)
         enddo
         enddo
         enddo
         call flag_bdry(glo_num,f,e,bctyp)
      enddo

      call fgslib_gs_setup(gs_sctr_hndl,glo_num,n,nekcomm,mp)

      return
      end
c-----------------------------------------------------------------------
      subroutine flag_bdry(idx,f,e,bctyp)
      include 'SIZE'
      include 'TOTAL'
      integer*8 idx(lx1,ly1,lz1,lelv)
      integer f,e
      character*3 bctyp

c     flag points on boundary

      if(cbc(f,e,1).eq.bctyp) then
         iface  = eface1(f)     ! surface to volume shifts
         js1    = skpdat(1,iface)
         jf1    = skpdat(2,iface)
         jskip1 = skpdat(3,iface)
         js2    = skpdat(4,iface)
         jf2    = skpdat(5,iface)
         jskip2 = skpdat(6,iface)

         do j2=js2,jf2,jskip2
         do j1=js1,jf1,jskip1
            idx(j1,j2,1,e) = - idx(j1,j2,1,e)
         enddo
         enddo          
      endif
      
      return
      end
c-----------------------------------------------------------------------
c     computes dist in direction of idir
c-----------------------------------------------------------------------
      subroutine dist2face(d,f,bctyp,gs_sctr_hndl
     $                      ,nelx,nely,nelz,ifld,idir)
      include 'SIZE'
      include 'TOTAL'
      real d (lx1,ly1,lz1,lelv)
      real dd(lx1,ly1,lz1,lelv)
      integer n,f,ifld

      nel = nelfld(ifld)
      n   = nx1*ny1*nz1*nel

      if(idir.eq.1) call copy(dd,xm1,n)
      if(idir.eq.2) call copy(dd,ym1,n)
      if(idir.eq.3) call copy(dd,zm1,n)

      call scttr(d,dd,f,bctyp,gs_sctr_hndl,nelx,nely,nelz,ifld,idir)

      do i=1,n
         d(i,1,1,1) = abs(dd(i,1,1,1)-d(i,1,1,1))
      enddo

      return
      end
c-----------------------------------------------------------------------
c-----------------------------------------------------------------------
c AVERAGING ROUTINES
c-----------------------------------------------------------------------
c-----------------------------------------------------------------------
      subroutine comp_L2(uL2,u)
      include 'SIZE'
      include 'TOTAL'

      real uL2, u(1)

      real u2(lx1*ly1*lz1*lelv)
      integer nt

      nt = lx1*ly1*lz1*nelv;

      do i=1,nt
        u2(i) = u(i) * u(i)
      enddo

      call avg_3d(uL2,u2)
      uL2 = sqrt(uL2)

      return
      end
c-----------------------------------------------------------------------
      subroutine avg_3d(ua,u)
      include 'SIZE'
      include 'TOTAL'
      real vol
      integer nt

      nt  = lx1*ly1*lz1*nelv
      vol = glsum(bm1,nt)
      ua  = glsc2(bm1,u,nt)/vol

      return
      end
c-----------------------------------------------------------------------
c
c Rely on lexicographical element ordering
c
c-----------------------------------------------------------------------
c
c  in usrchk()
c
c     integer nelx,nely,nelz,ifld
c     integer idir_plnr,idir_line,idir_geom,atyp

c     integer gs_plnr_hndl
c     save    gs_plnr_hndl
c     data    gs_plnr_hndl / 0 /

c     integer gs_line_hndl
c     save    gs_line_hndl
c     data    gs_line_hndl / 0 /

c     integer gs_geom_hndl
c     save    gs_geom_hndl
c     data    gs_geom_hndl / 0 /

c     nelx       = 64
c     nely       = 24
c     nelz       = 32
c     ifld       = 1
c     idir_line  = 2
c     idir_plnr  = 3
c     idir_geom  = 1
c     avgtyp     = 0 ! -ve: plnr, 0: line, mag>1: nrep for geomavg

c     call avg_tensor(vxa,vx,gs_line_hndl,gs_geom_hndl,nelx,nely,nelz
c    $            ,ifld,idir_line,idir_geom,atyp)
c
c-----------------------------------------------------------------------
      subroutine avg_tensor(ua,u,avgtyp,nelx,nely,nelz,ifld
     $                     ,gs_line_hndl,idir_line
     $                     ,gs_plnr_hndl,idir_plnr
     $                     ,gs_geom_hndl,idir_geom)
      include 'SIZE'
      include 'TOTAL'

      integer idir_line,idir_plnr,idir_geom
      integer avgtyp

      integer at,ntot

      integer icalld
      save    icalld 
      data    icalld / 0 /

      ntot = nx1*ny1*nz1*nelt

      if((nid.eq.0).and.(icalld.eq.0))
     $                   write(6,*)'in avg_tensor(...)','avgtyp:',avgtyp

      if(avgtyp.lt.0) then
       if((nid.eq.0).and.(icalld.eq.0))
     $                 write(6,*)'Plnr averaging in direction',idir_plnr

       call plane_avg_tensor(ua,u,gs_plnr_hndl,nelx,nely,nelz
     $                      ,ifld,idir_plnr)

      endif
      if(avgtyp.eq.0) then
       if((nid.eq.0).and.(icalld.eq.0))
     $                 write(6,*)'Line averaging in direction',idir_line
 
       call line_avg_tensor(ua,u,gs_line_hndl,nelx,nely,nelz
     $                      ,ifld,idir_line)

      endif
      at = abs(avgtyp)
      if(at.gt.1) then
       if((nid.eq.0).and.(icalld.eq.0))
     $       write(6,*)'Geom averaging in direction',idir_geom,'nrep',at
 
       call geom_avg_tensor(ua,u,gs_geom_hndl,nelx,nely,nelz
     $                     ,ifld,idir_geom,at)

      endif
      if(avgtyp.eq.1) then
       if((nid.eq.0).and.(icalld.eq.0)) write(6,*)'no averaging'

       call copy(ua,u,ntot)
      endif         

      icalld = icalld + 1

      return
      end
c-----------------------------------------------------------------------
      subroutine avg_tensor_wrapper(u,avgtyp,nelx,nely,nelz,ifld
     $                             ,gs_line_hndl,idir_line
     $                             ,gs_plnr_hndl,idir_plnr
     $                             ,gs_geom_hndl,idir_geom)
      include 'SIZE'
      include 'TOTAL'

      real u(lx1,ly1,lz1,lelt)
      integer avgtyp
c
      real w1(lx1,ly1,lz1,lelt)
      integer ntot

      ntot=lx1*ly1*lz1*nelt

      call avg_tensor(w1,u,avgtyp,nelx,nely,nelz,ifld
     $               ,gs_line_hndl,idir_line
     $               ,gs_plnr_hndl,idir_plnr
     $               ,gs_geom_hndl,idir_geom)

      call rzero(u,ntot)

      do i=1,ntot
         u(i,1,1,1) = w1(i,1,1,1)
      enddo

      return
      end
c-----------------------------------------------------------------------
c     LINE AVERAGE
c-----------------------------------------------------------------------
c
c     call line_avg_tensor(ua,u,gs_hndl,nelx,nely,nelz,ifld,idir)
c
c     ua: averaged field, u: field to average
c
c     idir=1 ==> average over y-z plane i.e. get X-profile.
c     idir=2 ==> average over x-z plane i.e. get Y-profile.
c     idir=3 ==> average over x-y plane i.e. get Z-profile.
c
c-----------------------------------------------------------------------
      subroutine line_avg_tensor(ua,u,gs_hndl,nelx,nely,nelz,ifld,idir)
      include 'SIZE'
      include 'TOTAL'
      real u (lx1,ly1,lz1,lelt)
      real ua(lx1,ly1,lz1,lelt)
      integer gs_hndl,e,ex,ey,ez,eg
c     common /c_is1/ glo_num(lx1,ly1,lz1,lelv)
c     integer*8 glo_num,ex_g

      nel = nelfld(ifld)
      n   = nx1*ny1*nz1*nel

      call rzero(ua,n)

      if (gs_hndl.eq.0) then

      if(idir.eq.1) call set_gs_x_hndl_line(gs_hndl,nelx,nely,nelz,ifld)
      if(idir.eq.2) call set_gs_y_hndl_line(gs_hndl,nelx,nely,nelz,ifld)
      if(idir.eq.3) call set_gs_z_hndl_line(gs_hndl,nelx,nely,nelz,ifld)

      endif

c     VERIFIED global numbering
c     do i=1,n
c         ua(i,1,1,1) = glo_num(i,1,1,1)
c     enddo

      call copy(ua,bm1,n)                 ! Set the averaging weights
      call fgslib_gs_op(gs_hndl,ua,1,1,0) ! Sum weights over columns
 
      do i=1,n                            ! ua = (w_j*u_j)/( sum_i w_i)
         ua(i,1,1,1) = bm1(i,1,1,1)*u(i,1,1,1)/ua(i,1,1,1)
      enddo
 
      call fgslib_gs_op(gs_hndl,ua,1,1,0) ! Sum weighted values

      return
      end
c-----------------------------------------------------------------------
      subroutine set_gs_x_hndl_line(gs_avg_hndl,nelx,nely,nelz,ifld)
      include 'SIZE'
      include 'TOTAL'
      integer gs_avg_hndl,e,ex,ey,ez,eg,nelx,nely,nelz
      common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal
      common /c_is1/ glo_num(lx1,ly1,lz1,lelv)
      integer*8 glo_num,ex_g

      nel = nelfld(ifld)
      do e=1,nel
       eg = lglel(e)
       call get_exyz(ex,ey,ez,eg,nelx,nely,nelz)
       ex_g = ey       ! Ensure int*8 promotion
       do k=1,nz1      ! Enumerate points along x
       do j=1,ny1
       do i=1,nx1
c         glo_num(i,j,k,e) = ex
          glo_num(i,j,k,e) = i + (ex-1)*(nx1-1)
       enddo
       enddo
       enddo
      enddo
      n = nel*nx1*ny1*nz1
      call fgslib_gs_setup(gs_avg_hndl,glo_num,n,nekcomm,mp)

      return
      end
c-----------------------------------------------------------------------
      subroutine set_gs_y_hndl_line(gs_avg_hndl,nelx,nely,nelz,ifld)
c     Set the y-average handle
      include 'SIZE'
      include 'TOTAL'
      integer gs_avg_hndl,e,ex,ey,ez,eg,nelx,nely,nelz
      common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal
      common /c_is1/ glo_num(lx1,ly1,lz1,lelv)
      integer*8 glo_num,ex_g

      nel = nelfld(ifld)
      do e=1,nel
       eg = lglel(e)
       call get_exyz(ex,ey,ez,eg,nelx,nely,nelz)
       ex_g = (ez-1)*nelx+ex       ! Ensure int*8 promotion
       do k=1,nz1      ! Enumerate points in the x-z plane
       do j=1,ny1
       do i=1,nx1
c         glo_num(i,j,k,e) = ey
          glo_num(i,j,k,e) = j + (ey-1)*(ny1-1)
       enddo
       enddo
       enddo
      enddo
      n = nel*nx1*ny1*nz1
      call fgslib_gs_setup(gs_avg_hndl,glo_num,n,nekcomm,mp)

      return
      end
c-----------------------------------------------------------------------
      subroutine set_gs_z_hndl_line(gs_avg_hndl,nelx,nely,nelz,ifld)
c     Set the z-average handle
      include 'SIZE'
      include 'TOTAL'
      integer gs_avg_hndl,e,ex,ey,ez,eg,nelx,nely,nelz
      common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal
      common /c_is1/ glo_num(lx1,ly1,lz1,lelv)
      integer*8 glo_num,ex_g

      nel = nelfld(ifld)
      do e=1,nel
       eg = lglel(e)
       call get_exyz(ex,ey,ez,eg,nelx,nely,nelz)            
       ex_g = ex       ! Ensure int*8 promotion
       do k=1,nz1      ! Enumerate points in the x-y plane
       do j=1,ny1
       do i=1,nx1
c         glo_num(i,j,k,e) = ez
          glo_num(i,j,k,e) = k + (ez-1)*(nz1-1)
       enddo
       enddo
       enddo
      enddo
      n = nel*nx1*ny1*nz1
      call fgslib_gs_setup(gs_avg_hndl,glo_num,n,nekcomm,mp)

      return
      end
c-----------------------------------------------------------------------
c
c     PLANAR AVERAGE
c     Written by Ketan Mittal
c
c-----------------------------------------------------------------------
c
c     idir=1 ==> average over x direction
c     idir=2 ==> average over y direction
c     idir=3 ==> average over z direction
c
c-----------------------------------------------------------------------
      subroutine plane_avg_tensor(ua,u,gs_hndl,nelx,nely,nelz,ifld,idir)
      include 'SIZE'
      include 'TOTAL'
      real u (lx1,ly1,lz1,lelt)
      real ua(lx1,ly1,lz1,lelt)
      integer gs_hndl,e,ex,ey,ez,eg

c
c     This routine does planar averaging for 'u' and outputs 'ua'
c     for box type meshes with structure - nelx x nely x nelz.
c
c     Input: u       - variable to be averaged
c            gs_hndl - handle for gs_setup            
c            nelx    - number of elements in x-direction
c            nely    - number of elements in y-direction
c            nelz    - number of elements in z-direction
c            ifld    - 1 for velocity, 2 for passive-scalar
c            idir    - direction for averaging, 1-x,2-y,3-z
c
c     Output ua      = u averaged in direction idir
c
c     TYPICAL USAGE:
c
c     integer gs_avg_hndl
c     save    gs_avg_hndl
c     data    gs_avg_hndl / 0 /
c     real vxa(lx1,ly1,lz1,lelt)
c     real vya(lx1,ly1,lz1,lelt)
c     real vza(lx1,ly1,lz1,lelt)
c     nelx = 18
c     nely = 12
c     nelz = 10
c     ifld = 1  !velocity field
c     idir = 2  !y_direction
c
c     call plane_avg_tensor(vxa,vx,gs_avg_hndl,nelx,nely,nelz,ifld,idir)
c     call plane_avg_tensor(vya,vy,gs_avg_hndl,nelx,nely,nelz,ifld,idir)
c     call plane_avg_tensor(vza,vz,gs_avg_hndl,nelx,nely,nelz,ifld,idir)

      nelxy = nelx*nely
      nelyz = nely*nelz
      nelzx = nelz*nelx

      if (gs_hndl.eq.0) then
       if(idir.eq.1) call set_gs_x_hndl_pl(gs_hndl,nelx,nelyz,ifld)
       if(idir.eq.2) call set_gs_y_hndl_pl(gs_hndl,nelx,nely,nelz,ifld)
       if(idir.eq.3) call set_gs_z_hndl_pl(gs_hndl,nelxy,ifld)
      endif

      nel = nelfld(ifld)
      n   = nx1*ny1*nz1*nel

      call copy(ua,bm1,n)              ! Set the averaging weights
      call fgslib_gs_op(gs_hndl,ua,1,1,0) ! Sum weights over columns

      do i=1,n                          ! ua = (w_j*u_j)/( sum_i w_i)
         ua(i,1,1,1) = bm1(i,1,1,1)*u(i,1,1,1)/ua(i,1,1,1)
      enddo

      call fgslib_gs_op(gs_hndl,ua,1,1,0) ! Sum weighted values

      return
      end
c-----------------------------------------------------------------------
      subroutine set_gs_x_hndl_pl(gs_avg_hndl,nelx,nelyz,ifld)
c     Set the x-average handle
      include 'SIZE'
      include 'TOTAL'
      integer gs_avg_hndl,e,ex,ey,ez,eg,nelyz,nelx
      common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal
      common /c_is1/ glo_num(lx1,ly1,lz1,lelv)
      integer*8 glo_num,ex_g

      nel = nelfld(ifld)
      do e=1,nel
       eg = lglel(e)
       call get_exyz(ex,ey,ez,eg,nelx,nelyz,1)
       ex_g = ey       ! Ensure int*8 promotion
       do k=1,nz1      ! Enumerate points in the y-z plane
       do j=1,ny1
       do i=1,nx1
          glo_num(i,j,k,e) = j+ny1*(k-1) + ny1*nz1*(ex_g-1)
       enddo
       enddo
       enddo
      enddo
      n = nel*nx1*ny1*nz1
      call fgslib_gs_setup(gs_avg_hndl,glo_num,n,nekcomm,mp)

      return
      end
c-----------------------------------------------------------------------
      subroutine set_gs_y_hndl_pl(gs_avg_hndl,nelx,nely,nelz,ifld)
c     Set the y-average handle
      include 'SIZE'
      include 'TOTAL'
      integer gs_avg_hndl,e,ex,ey,ez,eg,nelyz,nelx
      common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal
      common /c_is1/ glo_num(lx1,ly1,lz1,lelv)
      integer*8 glo_num,ex_g

      nel = nelfld(ifld)
      do e=1,nel
       eg = lglel(e)
       call get_exyz(ex,ey,ez,eg,nelx,nely,nelz)            
       ex_g = (ez-1)*nelx+ex       ! Ensure int*8 promotion
       do k=1,nz1      ! Enumerate points in the x-z plane
       do j=1,ny1
       do i=1,nx1
           glo_num(i,j,k,e) = k+nz1*(i-1) + nx1*nz1*(ex_g-1) 
       enddo
       enddo
       enddo
      enddo
      n = nel*nx1*ny1*nz1
      call fgslib_gs_setup(gs_avg_hndl,glo_num,n,nekcomm,mp)

      return
      end
c-----------------------------------------------------------------------
      subroutine set_gs_z_hndl_pl(gs_avg_hndl,nelxy,ifld)
c     Set the z-average handle
      include 'SIZE'
      include 'TOTAL'
      integer gs_avg_hndl,e,ex,ey,ez,eg
      common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal
      common /c_is1/ glo_num(lx1,ly1,lz1,lelv)
      integer*8 glo_num,ex_g

      nel = nelfld(ifld)
      do e=1,nel
       eg = lglel(e)
       call get_exyz(ex,ey,ez,eg,nelxy,1,1)
       ex_g = ex       ! Ensure int*8 promotion
       do k=1,nz1      ! Enumerate points in the x-y plane
       do j=1,ny1
       do i=1,nx1
          glo_num(i,j,k,e) = i+nx1*(j-1) + nx1*ny1*(ex_g-1)
       enddo
       enddo
       enddo
      enddo
      n = nel*nx1*ny1*nz1
      call fgslib_gs_setup(gs_avg_hndl,glo_num,n,nekcomm,mp)

      return
      end
c-----------------------------------------------------------------------
c
c GEOMETRIC AVERAGES over repeating features in domain
c
c-----------------------------------------------------------------------
      subroutine geom_avg_tensor(ua,u,gs_hndl,nelx,nely,nelz,ifld,idir
     $     ,nrepeat)
      include 'SIZE'
      include 'TOTAL'
      real u (lx1,ly1,lz1,lelt)
      real ua(lx1,ly1,lz1,lelt)
      integer gs_hndl,e,ex,ey,ez,eg
      integer idir,nrepeat

      common /c_is1/ glo_num(lx1,ly1,lz1,lelv)
      integer*8 glo_num

      if(nrepeat.eq.0) call exitt

      if (gs_hndl.eq.0) then
       if (idir.eq.1)
     $      call set_gs_x_hndl_geom(gs_hndl,nelx,nely,nelz,ifld,nrepeat)
       if (idir.eq.2)
     $      call set_gs_y_hndl_geom(gs_hndl,nelx,nely,nelz,ifld,nrepeat)
       if (idir.eq.3)
     $      call set_gs_z_hndl_geom(gs_hndl,nelx,nely,nelz,ifld,nrepeat)
      endif

      nel = nelfld(ifld)
      n   = nx1*ny1*nz1*nel

      call copy(ua,bm1,n)              ! Set the averaging weights
      call fgslib_gs_op(gs_hndl,ua,1,1,0) ! Sum weights over columns

      do i=1,n                          ! ua = (w_j*u_j)/( sum_i w_i)
         ua(i,1,1,1) = bm1(i,1,1,1)*u(i,1,1,1)/ua(i,1,1,1)
      enddo

      call fgslib_gs_op(gs_hndl,ua,1,1,0) ! Sum weighted values

      return
      end
c-----------------------------------------------------------------------
      subroutine set_gs_x_hndl_geom(gs_hndl,nelx,nely,nelz,ifld,nrepeat)
c     Set the x-average handle
      include 'SIZE'
      include 'TOTAL'
      integer gs_avg_hndl,e,ex,ey,ez,eg,nelx,nely,nelz
      common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal
      common /c_is1/ glo_num(lx1,ly1,lz1,lelv)

      integer nrepeat,erepeat,elx,ely,elz
      integer*8 lx,ly,lz,lb4
      integer*8 glo_num

      nel = nelfld(ifld)
      erepeat = int(nelx/nrepeat)

      elx = erepeat
      ely = nely
      elz = nelz

      lx  = elx*(nx1-1)+1 ! number of points in x dir
      ly  = ely*(ny1-1)+1
      lz  = elz*(nz1-1)+1

      do e=1,nel
       eg = lglel(e)
       call get_exyz(ex,ey,ez,eg,nelx,nely,nelz)
       ex = mod1(ex,erepeat) 
       do k=1,nz1
       do j=1,ny1
       do i=1,nx1
           lb4=                    ly*lx*(k+(ez-1)*(nz1-1)-1)
           lb4=              lb4 +    lx*(j+(ey-1)*(ny1-1)-1)
           glo_num(i,j,k,e)= lb4 +        i+(ex-1)*(nx1-1)
       enddo
       enddo
       enddo
      enddo

      n = nel*nx1*ny1*nz1

      call fgslib_gs_setup(gs_hndl,glo_num,n,nekcomm,mp)

      return
      end
c-----------------------------------------------------------------------
      subroutine set_gs_y_hndl_geom(gs_hndl,nelx,nely,nelz,ifld,nrepeat)
c     Set the y-average handle
      include 'SIZE'
      include 'TOTAL'
      integer gs_avg_hndl,e,ex,ey,ez,eg,nelx,nely,nelz
      common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal
      common /c_is1/ glo_num(lx1,ly1,lz1,lelv)

      integer nrepeat,erepeat,elx,ely,elz
      integer*8 lx,ly,lz,lb4
      integer*8 glo_num

      nel = nelfld(ifld)
      erepeat = int(nely/nrepeat)

      elx = nelx
      ely = erepeat
      elz = nelz

      lx  = elx*(nx1-1)+1 ! number of points in x dir
      ly  = ely*(ny1-1)+1
      lz  = elz*(nz1-1)+1

      do e=1,nel
       eg = lglel(e)
       call get_exyz(ex,ey,ez,eg,nelx,nely,nelz)
       ey = mod1(ey,erepeat) 
       do k=1,nz1
       do j=1,ny1
       do i=1,nx1
           lb4=                    ly*lx*(k+(ez-1)*(nz1-1)-1)
           lb4=              lb4 +    lx*(j+(ey-1)*(ny1-1)-1)
           glo_num(i,j,k,e)= lb4 +        i+(ex-1)*(nx1-1)
       enddo
       enddo
       enddo
      enddo

      n = nel*nx1*ny1*nz1
      call fgslib_gs_setup(gs_hndl,glo_num,n,nekcomm,mp)

      return
      end
c-----------------------------------------------------------------------
      subroutine set_gs_z_hndl_geom(gs_hndl,nelx,nely,nelz,ifld,nrepeat)
c     Set the z-average handle
      include 'SIZE'
      include 'TOTAL'
      integer gs_hndl,e,ex,ey,ez,eg,nelx,nely,nelz
      common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal
      common /c_is1/ glo_num(lx1,ly1,lz1,lelv)

      integer nrepeat,erepeat,elx,ely,elz
      integer*8 lx,ly,lz,lb4
      integer*8 glo_num

      nel = nelfld(ifld)
      erepeat = int(nelz/nrepeat)

      elx = nelx
      ely = nely
      elz = erepeat

      lx  = elx*(nx1-1)+1 ! number of points in x dir
      ly  = ely*(ny1-1)+1
      lz  = elz*(nz1-1)+1

      do e=1,nel
       eg = lglel(e)
       call get_exyz(ex,ey,ez,eg,nelx,nely,nelz)
       ez = mod1(ez,erepeat) 
       do k=1,nz1
       do j=1,ny1
       do i=1,nx1
           lb4=                    ly*lx*(k+(ez-1)*(nz1-1)-1)
           lb4=              lb4 +    lx*(j+(ey-1)*(ny1-1)-1)
           glo_num(i,j,k,e)= lb4 +        i+(ex-1)*(nx1-1)
       enddo
       enddo
       enddo
      enddo

      n = nel*nx1*ny1*nz1
      call fgslib_gs_setup(gs_hndl,glo_num,n,nekcomm,mp)

      return
      end
c-----------------------------------------------------------------------
